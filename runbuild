#!/bin/bash

check() {
    if [ $? -ne 0 ]; then
        echo "Error processing: $1"
        exit 1
    fi
}

do_build() {
    if [ ! -d "build" ]; then
        mkdir build
    fi
    cd build
    echo "Building ..."
    cmake ..
    check "cmake"
    make -j6
    check "make"
    cd ..
}

if [ "$#" = "0" ]; then
    # With no parameter: build
    do_build
elif [ "$1" = "clean" ]; then
    rm -rf \
        build \
        bin \
        lib \

    echo "Done."
elif [ "$1" = "distclean" ]; then
    rm -rf \
        build \
        bin \
        lib \
        gtest \
        test/bin \

    echo "Done."
elif [ "$1" = "test" ]; then
    do_build
    shift
    echo "Testing... "
    for test in `ls test/bin/*`
    do
        $test "$@"
        check "$test"
    done
elif [ "$1" = "demo" ]; then
    do_build
    dependency_dir=$(pwd)
    echo "---> $dependency_dir"
    command="${dependency_dir}/bin/dependency \
        -o \"-I ${dependency_dir}/src --std=c++14\" \
        -c ${dependency_dir} \
        -f ${dependency_dir}/src \
        -s \
        -H dependency \
        -H controller \
        > depend.dot"
    echo -e "demo command: \x1b[0;38;5;10m${command}\x1b[0m" | sed -e "s/ \+/ /g"
    eval ${command}
    dot -Tsvg depend.dot -o depend.svg
    echo -e "run \x1b[0;38;5;10meog depend.svg\x1b[0m to see the result"
elif [ "$1" = "check" ]; then
    do_build
    cppcheck --enable=warning,style,unusedFunction --error-exitcode=-1 src
else
    echo "Usage: `basename $0` [test|clean|distclean|demo|check]"
fi
